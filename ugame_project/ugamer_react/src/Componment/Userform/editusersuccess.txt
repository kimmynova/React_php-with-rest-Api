import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router';
import axios from 'axios';
import { Link } from 'react-router-dom';
import Swal from 'sweetalert2';

const Edituser = ({setOpenUpdate}) => {

  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { id } = useParams();
  const [formvule, setFormvalue] = useState({ Name: '', Username: '', Role: '', Password: '' });
  const [msg, setmsg] = useState('');
 

  const handleInput = (e) => {
    setFormvalue({ ...formvule, [e.target.name]: e.target.value });
  }

  useEffect(() => {
    const userRowdata = async () => {
      const getUserdata = await fetch("http://localhost/ugame_project/ugamerphp/user/user.php/" + id);
      const resuserdata = await getUserdata.json();
      setFormvalue(resuserdata);
    }
    userRowdata();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const CFR = await Swal.fire({
      title: 'Do you want to update the changes?',
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonText: 'Update',
      denyButtonText: `Don't Update`,
      color: localStorage.getItem('darkMode') === 'true' ? 'white' : '',
      background: localStorage.getItem('darkMode') === 'true' ? '#555555' : '#fff',

    });
    const save = () => {
      Swal.fire({
        title: 'Saved!',
        icon: 'success',
        color: localStorage.getItem('darkMode') === 'true' ? 'white' : '',
        background: localStorage.getItem('darkMode') === 'true' ? '#555555' : '#fff',
      });
    }
    const unsave = () => {
      Swal.fire({
        title: 'Changes are not saved!',
        icon: 'info',
        color: localStorage.getItem('darkMode') === 'true' ? 'white' : '',
        background: localStorage.getItem('darkMode') === 'true' ? '#555555' : '#fff',
      });
    }
    
    const formData = { id: id, Name: formvule.Name, Username: formvule.Username, Role: formvule.Role, Password: formvule.Password };
    if (CFR.isConfirmed) {
      try {
        const res = await axios.put("http://localhost/ugame_project/ugamerphp/user/user.php", formData);

        if (res.data.success) {
          setmsg(res.data.success);
          save()

          setTimeout(() => {
            navigate('/user');
          }, 2000);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    } else if (CFR.isDenied) {
      unsave()
      setTimeout(() => {
        navigate('/user');
      }, 2000);
    }
  };
//   useEffect(() => {
//     const productRowData = async () => {
//         try {
//             const response = await axios.get(`http://localhost/ugame_project/ugamerphp/user.php/${id}`);
//             if (response.data) {
//                 setFormvalue({
//                     id: response.data.id,
//                     Name: response.data.Name, 
//                     Username: response.data.Username,
//                     role: response.data.role,
//                     Password: response.data.Password,
                 
//                 });
//             }                    
//         } catch (error) {
//             console.error('Error:', error);
//         }
//     };
//     productRowData();
// }, [id]);


  return (
    <div className='absolute inset-0 flex items-center justify-center'>
     <Link to={"/user"}> <div 
        className='fixed top-0 left-0 w-screen h-screen bg-black opacity-80'

      ></div></Link>

      <div className='md:absolute border dark:bg-black border-gray-500 bg-white max-w-md h-[90vh] top-4 right-0 left-0 bottom-0 m-auto end relative '>
        <Link to={"/user"}><button className='bg-red-600  w-[55px] h-[56px] rounded text-white hover:bg-green-600 absolute top-0 right-0'>
          X
        </button></Link>
        <div className='flex items-center flex-col justify-center overflow-hidden '>
          <form onSubmit={handleSubmit} className='w-[60%] mx-5 flex items-center justify-center flex-col gap-1 '>
            <h3 className='bg-[#2980b9] dark:bg-[#3f4042]  text-white w-[450px] h-[9vh] text-center pt-3 text-2xl'>Edit</h3>
            {error && <div className="text-red-500 pt-3">{error}</div>}
            {msg && <div className="text-green-500 pt-3">{msg}</div>}
            {/* <label>ID: <input name='id' value={formvule.id} onChange={handleInput} className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label> */}
            <label>Name: <input name='Name' value={formvule.Name} onChange={handleInput} className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
            <label>Username: <input name='Username' value={formvule.Username} onChange={handleInput} className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
            {/* <label>Email: <input name='Email' value={formvule.Email} onChange={handleInput} className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label> */}
            <label>Role: <input name='Role' value={formvule.Role} onChange={handleInput} className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
            <label>Password: <input name='Password' value={formvule.Password} onChange={handleInput} className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
            <button type='submit' className='flex items-center bg-red-600 px-8 py-1 rounded text-white m-1 hover:bg-green-600'>
              Update
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Edituser;
