import React, { useState } from 'react'


const AddEmployee = ({ setopenEmployee }) => {
    const [empName, setempName] = useState("")
    const [gender, setgender] = useState("")
    const [dob, setdob] = useState("")
    const [Role, setRole] = useState("")
    const [Contact, setContact] = useState("")
    const [Addresss, setAddresss] = useState("")
    const [msg, setmsg] = useState("")
    const [errror, setError] = useState("")
    const [previewImg, setPreviewImg] = useState('');
    



     
      

    const handleinput = (e, type) => {
        setTimeout(() => {
            setmsg();

        }, 5000);
        switch (type) {
            case "Name":
                setError("");
                setempName(e.target.value);
                if (e.target.value === "") {
                    setmsg("Name has been left blank");
                }
                break;
            case "gender":
                setError("");
                setgender(e.target.value);
                if (e.target.value === "") {
                    setmsg("Must select gender")
                }

                break;
            case "dob":
                setError("");
                setdob(e.target.value);
                if (e.target.value === "") {
                    setmsg("date of brith has been left blank");
                }
                break;
            case "role":
                setError("");
                setRole(e.target.value);
                if (e.target.value === "") {
                    setmsg("Must select Role ");
                }
                break;
            case "contact":
                setError("");
                setContact(e.target.value);
                if (e.target.value === "") {
                    setmsg("contact has been left blank");
                }
                break;
            case "address":
                setError("");
                setAddresss(e.target.value);
                if (e.target.value === "") {
                    setmsg("address has been left blank");
                }
                break;
            default: ;
        }

    }
    const handleImageChange = (e) => {
        const selectedImage = e.target.files[0];
        if (selectedImage) {
            setPreviewImg(selectedImage);
            const imageURL = URL.createObjectURL(selectedImage);
            setPreviewImg(imageURL);
        } else {

        }
    };
    return (
        <div className='absolute inset-0 flex items-center justify-center'>

            <div className='absolute inset-0 flex items-center justify-center'>
                <div className='fixed top-0 left-0 w-screen h-screen bg-black opacity-80'
                    onClick={() => setopenEmployee(false)}></div>
            </div>
            <div className='flex justify-between items-center dark:bg-black md:absolute border border-gray-500 bg-white w-[65%] overflow-hidden h-[90vh] top-4 right-0 left-0 bottom-0 m-auto relative  '>
                <div className='flex items-center justify-center '>
                    <form className='w-[60%] flex items-center justify-center flex-col gap-1 mb-9 '>

                        <h3 className='dark:bg-[#3f4042] mb-3 bg-[#2980b9] text-white w-[450px] h-[9vh] text-center pt-3 text-2xl'>Add Employee</h3>
                        <p className='text-red-600'>
                            {
                                msg !== "" ?
                                    <span className='text-red-600 '>{msg}</span> :
                                    <span>{Error}</span>
                            }
                        </p>
                        {/* <label>ID: <input className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label> */}
                        <label>Name: <input type='text' onChange={(e) => handleinput(e, 'Name')} value={empName} placeholder="Employee Name" name="Name"
                            className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
                        <label>
                            Gender:
                            <select onChange={(e) => handleinput(e, 'gender')}
                                className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400'>
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                            </select>
                        </label>
                        <label>Date of brith:<input type='date' onChange={(e) => handleinput(e, 'dob')} value={dob}
                            className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
                        {/* <label>Gender: <input className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label> */}
                        <label>Position: <select onChange={(e) => handleinput(e, 'role')}value={Role}
                            className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400'>
                            <option value="">Select Role</option>
                            <option value="Admin">Admin</option>
                            <option value="User">User</option>
                        </select></label>
                        <label>Contact: <textarea onChange={(e) => handleinput(e, 'contact')} value={Contact}
                        type='number' rows={1} cols={30}  className='overflow-y-scroll dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
                        <label>Address: <input onChange={(e) => handleinput(e, 'address')} value={Addresss}
                         type='text' className='dark:bg-[#3f4042] w-[300px] h-[10%] rounded-md border-2 p-2 border-gray-400' /></label>
                        <button className=' flex items-center bg-red-600 px-8 py-1 rounded text-white m-1 hover:bg-green-600'>Comfirm</button>
                    </form>

                </div>
               
                <div className=' flex justify-center items-center flex-col mx-9 border w-[100%] h-[95%] my-3 px-4 pt-5 '>
                <h1 className='bg-[#2980b9] text-white font-bold w-[100%] py-2 text-center'> select image</h1>
                    {previewImg && (
                        <img src={previewImg} alt="image Preview" className="w-[100%] h-[100%] mb-3 "
                        />
                    )}
                    <div>
                    <input className="dark:bg-[#3f4042]  border flex justify-center mb-4"  type="file" onChange={(e) => {
                        handleImageChange(e)
                    }}
                        name="proimg"
                        
                    />
                    </div>
                    
                </div>
                </div>
           

        </div>
    )
}

export default AddEmployee





import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

const Login = () => {
  const navigate = useNavigate();
  const [username, setUsername] = useState(
    JSON.parse(localStorage.getItem("username"))||null
  );//prevent string
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [msg, setMsg] = useState('');
  const [islimitedLogin, setLimitedLogin] = useState(0);
  const [isTimeout, setTimeoutlimited] = useState(null);
  const [remainingTime, setRemainingTime] = useState(0);
  useEffect(() => {
    const login = localStorage.getItem('Login');
    if (login) {
      navigate('/home');
    }
    let loginStatue = localStorage.getItem("loginStatue"); // Corrected from localStorage.get
    if (loginStatue) {
      setError(loginStatue);
      setTimeout(() => {
        setMsg(loginStatue);
        localStorage.clear();
        window.location.reload();
      }, 1000);
    }
    const userRole = localStorage.getItem('UserRole');
    if (userRole) {
      setMsg(`You are logged in as ${userRole}`);
    }

    setTimeout(() => {
      setMsg('');
    }, 5000);
  }, []);

  const handleInputChange = (e, type) => {
    e.preventDefault();
    setError('');
    if (type === 'username') {
      setUsername(e.target.value);
    } else if (type === 'password') {
      setPassword(e.target.value);
    }
  };
  useEffect(() => {
    const currentTime = new Date().getTime();
    const TimeDifference = isTimeout ? 30000 - (currentTime - isTimeout) : 0;
    setRemainingTime(TimeDifference)
  }, [isTimeout]);

  const loginSubmit = (e) => {
    e.preventDefault();
    if (islimitedLogin >= 3 && isTimeout && remainingTime > 0) {
      setError(`Login attempts exceeded. Try again in ${Math.ceil(remainingTime / 1000)} seconds.`);
      return;
    }
    if (username !== '' && password !== '') {
      const url = 'http://localhost/ugame_project/ugamerphp/login.php'; // Update with your PHP API URL
      const headers = {
        Accept: 'application/json',
        'Content-type': 'application/json',
      };
      const data = {
        username: username,
        password: password,
      };
      fetch(url, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(data),
      })
        .then((response) => response.json())
        .then((response) => {
          if (response[0].result === 'login successful! redirecting...') {
            // Set the user's role in local storage
            localStorage.setItem('UserRole', response[0].role);
            setMsg(response[0].result);
            // localStorage.setItem("username",JSON.stringify(username));
            localStorage.setItem('Name',response[0].Name);
            setMsg(response[0].result);
            setTimeout(() => {
              localStorage.setItem('Login', true);
              navigate('/home');
            }, 3000);
          } else {
            setError(response[0].result);
            // update time increement
            setLimitedLogin(islimitedLogin + 1);
            setTimeoutlimited(new Date().getTime());
          }
        })
        .catch((err) => {
          setError(err.message);
          console.log(err);
        });
    } else {
      setError('All Fields are required');
    }
  };